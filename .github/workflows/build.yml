name: Build Kernel (4.9 - crDroid)
on:
  workflow_dispatch:
  schedule:
    # Setiap Sabtu pukul 00:00 UTC
    - cron: "0 0 * * 6"
  push:
    branches:
      - HEAD
  pull_request:
    branches:
      - HEAD

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "whyred_defconfig"
      KERNEL_CMDLINE: "ARCH=arm64 CC=clang CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- O=out"
    
    steps:
      - name: Checkout
        uses: acname: Kernel Build with MemKernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4

    - name: Set up MemKernel as module
      run: |
        curl -LSs "https://raw.githubusercontent.com/anko5/MemKernel/refs/heads/main/kernel/setup.sh" | bash -s M dogi
        echo "MemKernel setup completed"

    - name: Android kernel build
      uses: lemniskett/android-kernel-actions@master
      id: build
      env:
        NAME: Loganysl
      with:
        arch: arm64
        compiler: gcc/12
        defconfig: whyred_defconfig
        image: Image.gz-dtb

    - name: Verify module configuration
      run: |
        echo "Checking kernel config..."
        grep "CONFIG_MEMKERNEL" .config || echo "MemKernel config not found!"
        echo "Build log analysis:"
        grep -i "memkernel" ./out/build.log || echo "No memkernel references in build log"

    - name: Locate memkernel module
      id: locate_module
      run: |
        echo "Searching for memkernel.ko..."
        MODULE_PATH=$(find ./out -name "memkernel.ko" -type f | head -1)
        
        if [ -f "$MODULE_PATH" ]; then
          echo "Found memkernel.ko at: $MODULE_PATH"
          echo "File details:"
          ls -lh "$MODULE_PATH"
          echo "module_path=$MODULE_PATH" >> $GITHUB_OUTPUT
        else
          echo "ERROR: memkernel.ko not found in out directory!"
          echo "Searching entire workspace..."
          find . -name "memkernel.ko" -type f || echo "memkernel.ko not found anywhere"
          exit 1
        fi

    - name: Build verification
      run: |
        echo "Verifying module dependencies..."
        if [ -f "${{ steps.locate_module.outputs.module_path }}" ]; then
          file "${{ steps.locate_module.outputs.module_path }}"
          modinfo "${{ steps.locate_module.outputs.module_path }}" || true
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-artifacts
        path: |
          ${{ steps.build.outputs.outfile }}
          ${{ steps.locate_module.outputs.module_path }}
        if-no-files-found: error

    - name: Debug info
      if: always()
      run: |
        echo "===== DEBUG INFORMATION ====="
        echo "Kernel image path: ${{ steps.build.outputs.outfile }}"
        echo "Module path: ${{ steps.locate_module.outputs.module_path }}"
        echo "Directory structure:"
        tree -L 3 ./out || ls -R ./outtions/checkout@v4
        with:
          submodules: "true"
          fetch-depth: 100

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Install dependencies
        run: |
          sudo apt-get update -y 
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install gcc-arm-linux-gnueabi -y
          sudo apt install aria2 binutils make python3 libssl-dev build-essential bc bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs -y
          curl -LSs "https://raw.githubusercontent.com/Poko-Apps/MemKernel/main/kernel/setup.sh" | bash -s Y
          aria2c -j$(nproc --all) $(curl -fsSL https://raw.githubusercontent.com/Vynxid/Clang/refs/heads/main/Clang-main-link.txt)
          mkdir zyc-clang
          tar -xzvf Clang-*.tar.gz -C zyc-clang >> /dev/null
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          rm -rf AnyKernel3/.git* AnyKernel3/README.md
          # mem module
          curl -LSs "https://raw.githubusercontent.com/Poko-Apps/MemKernel/main/kernel/setup.sh" | bash -s M vinn

      - name: GetTime
        id: get_time
        run: |
          echo "TIME=$(TZ=UTC+3 date +%s )" >> $GITHUB_OUTPUT

      - name: Build Kernel-With-KernelSU
        run: |
          export PATH=$(pwd)/zyc-clang/bin/:$PATH
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang"
          make $KERNEL_CMDLINE CC="ccache clang" -j$(nproc --all)
          cp out/arch/arm64/boot/Image.gz AnyKernel3

      - name: Upload Kernel-SU
        uses: actions/upload-artifact@v4
        with:
          name: Nyan_kernel-KSU-${{ steps.get_time.outputs.TIME }}
          path: "AnyKernel3/*"
    
      - name: Upload mem module
        uses: actions/upload-artifact@v4
        with:
          name: memodule
          path: "./out/drivers/memkernel/vinn_memk.ko"
